from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for, session, flash
import os
from datetime import datetime
import base64
import wave
import io
import hashlib
import json
from functools import wraps
import re
from dotenv import load_dotenv
import google.generativeai as genai
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import markdown

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'sua_chave_secreta_aqui_mude_em_producao')

# Configurar Gemini
gemini_api_key = os.getenv('GEMINI_API_KEY')
if gemini_api_key:
    genai.configure(api_key=gemini_api_key)
    model = genai.GenerativeModel('gemini-2.5-flash')
else:
    model = None
    print("‚ö†Ô∏è AVISO: GEMINI_API_KEY n√£o configurada no arquivo .env")

# Diret√≥rios
RECORDINGS_DIR = 'recordings'
TRANSCRIPTIONS_DIR = 'transcriptions'
USERS_FILE = 'users.json'

if not os.path.exists(RECORDINGS_DIR):
    os.makedirs(RECORDINGS_DIR)
if not os.path.exists(TRANSCRIPTIONS_DIR):
    os.makedirs(TRANSCRIPTIONS_DIR)

# Fun√ß√µes de autentica√ß√£o
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def sanitize_filename(filename):
    # Remove caracteres especiais e mant√©m apenas letras, n√∫meros, espa√ßos e h√≠fens
    return re.sub(r'[^\w\s-]', '', filename).strip()

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Fun√ß√£o para transcrever √°udio
def transcribe_audio_with_speech_recognition(audio_path):
    """Transcreve √°udio usando uma abordagem mais robusta"""
    try:
        print(f"üîç Iniciando transcri√ß√£o de: {audio_path}")
        
        # Verificar se o arquivo existe
        if not os.path.exists(audio_path):
            return "[Erro: Arquivo de √°udio n√£o encontrado]"
        
        # Verificar tamanho do arquivo
        file_size = os.path.getsize(audio_path)
        print(f"üìä Tamanho do arquivo: {file_size} bytes")
        
        if file_size < 1000:  # Arquivo muito pequeno
            return "[Erro: Arquivo de √°udio muito pequeno ou vazio]"
        
        recognizer = sr.Recognizer()
        
        # Configura√ß√µes mais robustas para timeout
        recognizer.energy_threshold = 4000
        recognizer.dynamic_energy_threshold = False
        recognizer.pause_threshold = 0.8
        recognizer.operation_timeout = 30  # Aumentado de 10 para 30 segundos
        
        print("üìÅ Processando arquivo de √°udio...")
        
        # Estrat√©gia: Converter para um formato muito b√°sico
        try:
            # Carregar com pydub
            print("üîß Carregando arquivo com pydub...")
            audio = AudioSegment.from_file(audio_path)
            
            print(f"üìä Propriedades originais: {audio.frame_rate}Hz, {audio.channels} canais, {audio.sample_width*8}bit")
            
            # Verificar dura√ß√£o do √°udio
            duration_seconds = len(audio) / 1000.0
            print(f"‚è±Ô∏è Dura√ß√£o do √°udio: {duration_seconds:.1f} segundos")
            
            # Se o √°udio for muito longo (mais de 60 segundos), dividir em segmentos
            if duration_seconds > 60:
                print("üìÇ √Åudio longo detectado, dividindo em segmentos...")
                return transcribe_long_audio_in_segments(audio, audio_path)
            
            # Converter para o formato mais b√°sico poss√≠vel
            # 16kHz, mono, 16-bit (padr√£o para speech recognition)
            audio = audio.set_frame_rate(16000)
            audio = audio.set_channels(1)
            audio = audio.set_sample_width(2)  # 16-bit
            
            # Normalizar o √°udio (ajustar volume)
            audio = audio.normalize()
            
            # Criar arquivo tempor√°rio com nome espec√≠fico
            temp_dir = tempfile.gettempdir()
            temp_path = os.path.join(temp_dir, f"temp_audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav")
            
            print(f"üíæ Salvando arquivo tempor√°rio: {temp_path}")
            
            # Exportar com configura√ß√µes espec√≠ficas
            audio.export(
                temp_path, 
                format="wav",
                parameters=["-acodec", "pcm_s16le"]  # Codec PCM 16-bit little endian
            )
            
            print("üéµ Lendo arquivo convertido...")
            
            # Tentar ler o arquivo convertido
            with sr.AudioFile(temp_path) as source:
                print("üîä Ajustando para ru√≠do ambiente...")
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                print("üìº Gravando dados de √°udio...")
                audio_data = recognizer.record(source)
            
            print("üóëÔ∏è Removendo arquivo tempor√°rio...")
            os.unlink(temp_path)
            
        except Exception as conv_error:
            print(f"‚ö†Ô∏è Erro na convers√£o: {conv_error}")
            
            # Fallback: tentar ler diretamente
            print("üîÑ Tentando ler arquivo original...")
            try:
                with sr.AudioFile(audio_path) as source:
                    recognizer.adjust_for_ambient_noise(source, duration=0.5)
                    audio_data = recognizer.record(source)
            except Exception as direct_error:
                print(f"‚ùå Erro ao ler arquivo: {direct_error}")
                # √öltimo recurso: tentar sem ajuste de ru√≠do
                try:
                    print("üîÑ Tentativa final sem ajuste de ru√≠do...")
                    with sr.AudioFile(audio_path) as source:
                        audio_data = recognizer.record(source)
                except Exception as final_error:
                    return f"[Erro: N√£o foi poss√≠vel processar o arquivo de √°udio. O formato pode n√£o ser suportado. Detalhes: {final_error}]"
        
        # Tentar transcrever com retry autom√°tico
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"ü§ñ Enviando para Google Speech API (tentativa {attempt + 1}/{max_retries})...")
                
                # Usar timeout mais longo na chamada da API
                import socket
                original_timeout = socket.getdefaulttimeout()
                socket.setdefaulttimeout(60)  # 60 segundos para a conex√£o
                
                text = recognizer.recognize_google(
                    audio_data, 
                    language='pt-BR', 
                    show_all=False
                )
                
                # Restaurar timeout original
                socket.setdefaulttimeout(original_timeout)
                
                print(f"‚úÖ Transcri√ß√£o conclu√≠da: {len(text)} caracteres")
                return text if text.strip() else "[√Åudio vazio ou muito baixo]"
                
            except (TimeoutError, socket.timeout) as timeout_error:
                print(f"‚è∞ Timeout na tentativa {attempt + 1}: {timeout_error}")
                if attempt < max_retries - 1:
                    print(f"üîÑ Tentando novamente em 2 segundos...")
                    import time
                    time.sleep(2)
                    continue
                else:
                    return "[Erro: Timeout na transcri√ß√£o. O arquivo pode ser muito longo ou a conex√£o est√° lenta. Tente dividir o √°udio em partes menores.]"
                    
            except sr.UnknownValueError:
                print("‚ö†Ô∏è √Åudio n√£o compreendido")
                return "[√Åudio n√£o p√¥de ser compreendido - verifique a qualidade do √°udio e tente falar mais claramente]"
            except sr.RequestError as e:
                print(f"‚ùå Erro no servi√ßo Google: {e}")
                return f"[Erro no servi√ßo de reconhecimento: {e}]"
            finally:
                # Garantir que o timeout seja restaurado
                if 'original_timeout' in locals():
                    socket.setdefaulttimeout(original_timeout)
                
    except Exception as e:
        print(f"üí• Erro geral: {str(e)}")
        import traceback
        traceback.print_exc()
        return f"[Erro na transcri√ß√£o: {str(e)}]"

def transcribe_long_audio_in_segments(audio, original_path):
    """Transcreve √°udio longo dividindo em segmentos de 45 segundos"""
    try:
        print("üìÇ Iniciando transcri√ß√£o por segmentos...")
        
        segment_length = 45 * 1000  # 45 segundos em millisegundos
        total_duration = len(audio)
        segments = []
        transcriptions = []
        
        # Dividir √°udio em segmentos
        for i in range(0, total_duration, segment_length):
            end = min(i + segment_length, total_duration)
            segment = audio[i:end]
            segments.append(segment)
            print(f"üìÑ Segmento {len(segments)}: {i/1000:.1f}s - {end/1000:.1f}s")
        
        # Transcrever cada segmento
        for idx, segment in enumerate(segments):
            print(f"üéØ Transcrevendo segmento {idx + 1}/{len(segments)}...")
            
            # Salvar segmento tempor√°rio
            temp_dir = tempfile.gettempdir()
            segment_path = os.path.join(temp_dir, f"segment_{idx}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav")
            
            # Converter segmento para formato adequado
            segment = segment.set_frame_rate(16000).set_channels(1).set_sample_width(2)
            segment = segment.normalize()
            segment.export(segment_path, format="wav", parameters=["-acodec", "pcm_s16le"])
            
            # Transcrever segmento
            recognizer = sr.Recognizer()
            recognizer.operation_timeout = 30
            
            try:
                with sr.AudioFile(segment_path) as source:
                    recognizer.adjust_for_ambient_noise(source, duration=0.3)
                    audio_data = recognizer.record(source)
                
                # Tentar transcrever com timeout
                import socket
                original_timeout = socket.getdefaulttimeout()
                socket.setdefaulttimeout(45)
                
                text = recognizer.recognize_google(audio_data, language='pt-BR')
                socket.setdefaulttimeout(original_timeout)
                
                transcriptions.append(text if text.strip() else "[Segmento silencioso]")
                print(f"‚úÖ Segmento {idx + 1} transcrito: {len(text)} caracteres")
                
            except Exception as seg_error:
                print(f"‚ö†Ô∏è Erro no segmento {idx + 1}: {seg_error}")
                transcriptions.append(f"[Erro no segmento {idx + 1}]")
            finally:
                # Limpar arquivo tempor√°rio
                if os.path.exists(segment_path):
                    os.unlink(segment_path)
                if 'original_timeout' in locals():
                    socket.setdefaulttimeout(original_timeout)
        
        # Combinar transcri√ß√µes
        final_transcription = "\n\n".join([f"[Segmento {i+1}]\n{trans}" for i, trans in enumerate(transcriptions)])
        
        print(f"üéâ Transcri√ß√£o por segmentos conclu√≠da: {len(final_transcription)} caracteres")
        return final_transcription
        
    except Exception as e:
        print(f"üí• Erro na transcri√ß√£o por segmentos: {e}")
        return f"[Erro na transcri√ß√£o por segmentos: {str(e)}]"

def improve_transcription_with_gemini(raw_transcription):
    """Melhora a transcri√ß√£o usando Gemini"""
    if not model or not raw_transcription or raw_transcription.startswith('['):
        return raw_transcription
    
    try:
        prompt = f"""
Voc√™ √© um assistente especializado em melhorar transcri√ß√µes m√©dicas. 
Sua tarefa √© corrigir e melhorar a seguinte transcri√ß√£o de uma consulta m√©dica:

Transcri√ß√£o original:
{raw_transcription}

Por favor:
1. Corrija erros de gram√°tica e ortografia
2. Melhore a pontua√ß√£o e formata√ß√£o
3. Organize o texto de forma clara e profissional
4. Mantenha todos os termos m√©dicos e informa√ß√µes importantes
5. Se poss√≠vel, estruture em se√ß√µes (ex: Queixa principal, Hist√≥rico, Exame f√≠sico, etc.)

Retorne apenas o texto melhorado, sem coment√°rios adicionais:
"""
        
        response = model.generate_content(prompt)
        return response.text.strip()
        
    except Exception as e:
        print(f"Erro ao melhorar transcri√ß√£o com Gemini: {e}")
        return raw_transcription

# Fun√ß√µes para exporta√ß√£o
def create_pdf_from_text(text, title="Resumo da Consulta"):
    """Cria um PDF a partir de texto com formata√ß√£o melhorada"""
    buffer = io.BytesIO()
    
    # Criar documento PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                          rightMargin=72, leftMargin=72,
                          topMargin=72, bottomMargin=72)
    
    # Estilos melhorados
    styles = getSampleStyleSheet()
    
    # Estilo do t√≠tulo principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1,  # Centralizado
        textColor=colors.HexColor('#1565c0'),
        fontName='Helvetica-Bold'
    )
    
    # Estilo para cabe√ßalhos de se√ß√£o
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        spaceBefore=20,
        textColor=colors.HexColor('#2196f3'),
        fontName='Helvetica-Bold'
    )
    
    # Estilo para subcabe√ßalhos
    subheading_style = ParagraphStyle(
        'CustomSubHeading',
        parent=styles['Heading3'],
        fontSize=12,
        spaceAfter=8,
        spaceBefore=15,
        textColor=colors.HexColor('#42a5f5'),
        fontName='Helvetica-Bold'
    )
    
    # Estilo normal melhorado
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        leading=16,
        fontName='Helvetica'
    )
    
    # Estilo para texto em negrito
    bold_style = ParagraphStyle(
        'CustomBold',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        leading=16,
        fontName='Helvetica-Bold'
    )
    
    # Conte√∫do
    story = []
    
    # T√≠tulo com √≠cone
    story.append(Paragraph(f"üìã {title}", title_style))
    story.append(Spacer(1, 12))
    
    # Data de gera√ß√£o
    story.append(Paragraph(f"üìÖ Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", normal_style))
    story.append(Spacer(1, 20))
    
    # Processar o texto linha por linha
    lines = text.split('\n')
    for line in lines:
        line = line.strip()
        if not line:
            story.append(Spacer(1, 6))
            continue
            
        # Cabe√ßalho principal (##)
        if line.startswith('## '):
            clean_line = line[3:].strip()
            story.append(Paragraph(clean_line, heading_style))
        
        # Subcabe√ßalho (###)
        elif line.startswith('### '):
            clean_line = line[4:].strip()
            # Manter √≠cones nos subcabe√ßalhos
            story.append(Paragraph(clean_line, subheading_style))
        
        # Texto em negrito (**texto**)
        elif line.startswith('**') and line.endswith('**'):
            clean_line = line[2:-2].strip()
            story.append(Paragraph(clean_line, bold_style))
        
        # Texto normal
        else:
            story.append(Paragraph(line, normal_style))
    
    # Construir PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

def create_docx_from_text(text, title="Resumo da Consulta"):
    """Cria um DOCX a partir de texto"""
    doc = Document()
    
    # T√≠tulo
    title_para = doc.add_heading(title, 0)
    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Data de gera√ß√£o
    date_para = doc.add_paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
    date_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    
    # Espa√ßo
    doc.add_paragraph()
    
    # Converter markdown para texto formatado se necess√°rio
    if '##' in text:
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if line.startswith('## '):
                # Cabe√ßalho n√≠vel 2
                doc.add_heading(line[3:], level=1)
            elif line.startswith('### '):
                # Cabe√ßalho n√≠vel 3
                doc.add_heading(line[4:], level=2)
            elif line.startswith('**') and line.endswith('**'):
                # Texto em negrito
                para = doc.add_paragraph()
                para.add_run(line[2:-2]).bold = True
            elif line:
                # Par√°grafo normal
                doc.add_paragraph(line)
    else:
        # Texto simples
        paragraphs = text.split('\n')
        for para in paragraphs:
            if para.strip():
                doc.add_paragraph(para)
    
    # Salvar em buffer
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# Rotas de autentica√ß√£o
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        users = load_users()
        
        if username in users and users[username]['password'] == hash_password(password):
            session['user_id'] = username
            session['user_name'] = users[username]['name']
            flash('Login realizado com sucesso!', 'success')
            return redirect(url_for('index'))
        else:
            flash('Usu√°rio ou senha incorretos!', 'error')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        name = request.form['name']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        users = load_users()
        
        # Valida√ß√µes
        if username in users:
            flash('Nome de usu√°rio j√° existe!', 'error')
        elif password != confirm_password:
            flash('Senhas n√£o coincidem!', 'error')
        elif len(password) < 6:
            flash('Senha deve ter pelo menos 6 caracteres!', 'error')
        else:
            # Criar novo usu√°rio
            users[username] = {
                'name': name,
                'password': hash_password(password),
                'created_at': datetime.now().isoformat()
            }
            save_users(users)
            
            session['user_id'] = username
            session['user_name'] = name
            flash('Conta criada com sucesso!', 'success')
            return redirect(url_for('index'))
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('Logout realizado com sucesso!', 'success')
    return redirect(url_for('login'))

# Rotas protegidas
@app.route('/')
@login_required
def index():
    return render_template('index.html', user_name=session.get('user_name'))

def convert_to_wav(audio_bytes):
    """Converte qualquer formato de √°udio para WAV compat√≠vel com SpeechRecognition"""
    try:
        # Criar arquivo tempor√°rio para o √°udio original
        with tempfile.NamedTemporaryFile(delete=False, suffix='.webm') as temp_input:
            temp_input.write(audio_bytes)
            temp_input_path = temp_input.name
        
        # Carregar √°udio com pydub (suporta v√°rios formatos)
        audio = AudioSegment.from_file(temp_input_path)
        
        # Converter para WAV com configura√ß√µes espec√≠ficas para SpeechRecognition
        # 16-bit, mono, 16kHz (formato padr√£o para reconhecimento de voz)
        audio = audio.set_frame_rate(16000).set_channels(1).set_sample_width(2)
        
        # Criar arquivo tempor√°rio para o WAV convertido
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as temp_output:
            temp_output_path = temp_output.name
        
        # Exportar como WAV
        audio.export(temp_output_path, format="wav")
        
        # Ler o WAV convertido
        with open(temp_output_path, 'rb') as f:
            wav_bytes = f.read()
        
        # Limpar arquivos tempor√°rios
        os.unlink(temp_input_path)
        os.unlink(temp_output_path)
        
        return wav_bytes
        
    except Exception as e:
        print(f"Erro na convers√£o de √°udio: {e}")
        # Se falhar, tentar retornar os bytes originais
        return audio_bytes

@app.route('/save_recording', methods=['POST'])
@login_required
def save_recording():
    try:
        data = request.json
        audio_data = data['audio']
        patient_name = data.get('patient_name', '').strip()
        
        # Remove o prefixo 'data:audio/wav;base64,' ou similar
        if ',' in audio_data:
            audio_data = audio_data.split(',')[1]
        
        # Decodifica o base64
        audio_bytes = base64.b64decode(audio_data)
        
        # Converter para WAV compat√≠vel
        print("üîÑ Convertendo √°udio para formato WAV...")
        wav_bytes = convert_to_wav(audio_bytes)
        
        # Gera nome do arquivo
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        user_id = session['user_id']
        
        if patient_name:
            safe_patient_name = sanitize_filename(patient_name)
            filename = f'{user_id}_{safe_patient_name}_{timestamp}.wav'
        else:
            filename = f'{user_id}_conversa_{timestamp}.wav'
            
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        # Salvar o WAV convertido
        with open(filepath, 'wb') as f:
            f.write(wav_bytes)
        
        print(f"‚úÖ √Åudio convertido e salvo: {filename}")
        
        return jsonify({
            'success': True, 
            'message': 'Grava√ß√£o salva com sucesso!',
            'filename': filename
        })
    
    except Exception as e:
        print(f"‚ùå Erro ao salvar grava√ß√£o: {str(e)}")
        return jsonify({
            'success': False, 
            'message': f'Erro ao salvar grava√ß√£o: {str(e)}'
        }), 500

@app.route('/transcribe', methods=['POST'])
@login_required
def transcribe_recording():
    try:
        data = request.json
        filename = data['filename']
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({'success': False, 'message': 'Arquivo n√£o encontrado'}), 404
        
        print(f"üéØ Iniciando transcri√ß√£o de: {filename}")
        
        # Transcrever o √°udio
        transcription = transcribe_audio_with_speech_recognition(filepath)
        
        # Melhorar com Gemini se dispon√≠vel
        if model and not transcription.startswith('['):
            print("ü§ñ Melhorando transcri√ß√£o com Gemini...")
            transcription = improve_transcription_with_gemini(transcription)
        
        # Salvar transcri√ß√£o
        base_filename = os.path.splitext(filename)[0]
        transcription_filename = f'{base_filename}_transcricao.txt'
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_filename)
        
        with open(transcription_path, 'w', encoding='utf-8') as f:
            f.write(transcription)
        
        print(f"‚úÖ Transcri√ß√£o salva: {transcription_filename}")
        
        return jsonify({
            'success': True,
            'message': 'Transcri√ß√£o conclu√≠da com sucesso!',
            'transcription': transcription,
            'transcription_file': transcription_filename
        })
    
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Erro na transcri√ß√£o: {str(e)}'
        }), 500

@app.route('/download_transcription/<filename>')
@login_required
def download_transcription(filename):
    user_id = session['user_id']
    
    # Verificar se o arquivo pertence ao usu√°rio
    if not filename.startswith(user_id):
        flash('Acesso negado!', 'error')
        return redirect(url_for('index'))
    
    filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
    
    if os.path.exists(filepath):
        return send_file(filepath, as_attachment=True)
    else:
        flash('Arquivo de transcri√ß√£o n√£o encontrado!', 'error')
        return redirect(url_for('index'))

@app.route('/rename_recording', methods=['POST'])
@login_required
def rename_recording():
    try:
        data = request.json
        old_filename = data['old_filename']
        new_name = data['new_name']
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not old_filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        # Sanitizar novo nome
        safe_new_name = sanitize_filename(new_name)
        if not safe_new_name:
            return jsonify({'success': False, 'message': 'Nome inv√°lido'}), 400
        
        # Gerar novo nome do arquivo
        timestamp = old_filename.split('_')[-1]  # Manter timestamp original
        new_filename = f'{user_id}_{safe_new_name}_{timestamp}'
        
        old_path = os.path.join(RECORDINGS_DIR, old_filename)
        new_path = os.path.join(RECORDINGS_DIR, new_filename)
        
        if os.path.exists(old_path):
            os.rename(old_path, new_path)
            
            # Renomear transcri√ß√£o se existir
            old_transcription = os.path.join(TRANSCRIPTIONS_DIR, 
                                           os.path.splitext(old_filename)[0] + '_transcricao.txt')
            new_transcription = os.path.join(TRANSCRIPTIONS_DIR, 
                                           os.path.splitext(new_filename)[0] + '_transcricao.txt')
            
            if os.path.exists(old_transcription):
                os.rename(old_transcription, new_transcription)
            
            return jsonify({
                'success': True,
                'message': 'Arquivo renomeado com sucesso!',
                'new_filename': new_filename
            })
        else:
            return jsonify({'success': False, 'message': 'Arquivo n√£o encontrado'}), 404
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao renomear: {str(e)}'
        }), 500

@app.route('/transcriptions')
@login_required
def transcriptions_page():
    """P√°gina para listar todas as transcri√ß√µes"""
    return render_template('transcriptions.html', user_name=session.get('user_name', 'Usu√°rio'))

@app.route('/api/transcriptions')
@login_required
def get_all_transcriptions():
    """API para listar todas as transcri√ß√µes do usu√°rio"""
    try:
        user_id = session['user_id']
        transcriptions = []
        
        # Listar arquivos de transcri√ß√£o
        for filename in os.listdir(TRANSCRIPTIONS_DIR):
            if filename.startswith(user_id) and filename.endswith('_transcricao.txt'):
                filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
                
                # Obter informa√ß√µes do arquivo
                file_size = os.path.getsize(filepath)
                modified_time = os.path.getmtime(filepath)
                modified_date = datetime.fromtimestamp(modified_time).strftime('%d/%m/%Y %H:%M')
                
                # Ler uma pr√©via do conte√∫do
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        preview = content[:200] + '...' if len(content) > 200 else content
                except:
                    content = '[Erro ao ler arquivo]'
                    preview = '[Erro ao ler arquivo]'
                
                # Extrair nome do paciente do filename
                base_name = filename.replace('_transcricao.txt', '')
                parts = base_name.split('_')
                patient_name = 'Conversa' if len(parts) < 3 or parts[1] == 'conversa' else parts[1]
                
                # Verificar se j√° tem resumo
                summary_filename = base_name + '_resumo.txt'
                summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
                has_summary = os.path.exists(summary_path)
                
                # Buscar arquivo WAV original
                wav_filename = base_name + '.wav'
                wav_filepath = os.path.join(RECORDINGS_DIR, wav_filename)
                
                # Obter tamanho do WAV original
                wav_file_size = 0
                if os.path.exists(wav_filepath):
                    wav_file_size = os.path.getsize(wav_filepath)
                
                transcriptions.append({
                    'filename': filename,
                    'patient_name': patient_name,
                    'modified_date': modified_date,
                    'modified_timestamp': modified_time,
                    'size': wav_file_size,
                    'file_size': wav_file_size,
                    'transcription_size': file_size,
                    'preview': preview,
                    'content': content,
                    'has_summary': has_summary,
                    'summary_filename': summary_filename if has_summary else None
                })
        
        # Ordenar por timestamp (mais recente primeiro)
        transcriptions.sort(key=lambda x: x['modified_timestamp'], reverse=True)
        
        return jsonify({
            'success': True,
            'transcriptions': transcriptions
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao listar transcri√ß√µes: {str(e)}'
        }), 500

@app.route('/api/generate_summary', methods=['POST'])
@login_required
def generate_summary():
    """Gerar resumo de uma transcri√ß√£o usando IA"""
    try:
        data = request.json
        filename = data['filename']
        custom_prompt = data.get('custom_prompt', '').strip()
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({'success': False, 'message': 'Arquivo n√£o encontrado'}), 404
        
        # Ler conte√∫do da transcri√ß√£o
        with open(filepath, 'r', encoding='utf-8') as f:
            transcription_content = f.read()
        
        if not model:
            return jsonify({
                'success': False, 
                'message': 'IA n√£o configurada. Configure a GEMINI_API_KEY no arquivo .env'
            }), 500
        
        # Construir prompt baseado na entrada do usu√°rio
        if custom_prompt:
            # Usar prompt personalizado do usu√°rio
            prompt = f"""
Voc√™ √© um assistente m√©dico especializado em criar resumos de consultas m√©dicas.
Analise a seguinte transcri√ß√£o seguindo as instru√ß√µes espec√≠ficas do usu√°rio:

INSTRU√á√ïES DO USU√ÅRIO:
{custom_prompt}

Transcri√ß√£o:
{transcription_content}

Por favor, crie um resumo seguindo exatamente as instru√ß√µes fornecidas pelo usu√°rio acima.
Mantenha o resumo profissional e focado nos aspectos m√©dicos mais importantes.
"""
        else:
            # Usar prompt padr√£o
            prompt = f"""
Voc√™ √© um assistente m√©dico especializado em criar resumos de consultas m√©dicas.
Analise a seguinte transcri√ß√£o e crie um resumo estruturado e profissional:

Transcri√ß√£o:
{transcription_content}

Por favor, crie um resumo seguindo esta estrutura:

## RESUMO DA CONSULTA

**Data:** [Extrair se mencionada ou indicar como n√£o especificada]
**Paciente:** [Nome se mencionado ou "N√£o especificado"]

### üîç QUEIXA PRINCIPAL
[Motivo principal da consulta]

### üìã HIST√ìRICO
[Hist√≥rico relevante mencionado]

### ü©∫ EXAME F√çSICO
[Achados do exame f√≠sico se mencionados]

### üíä CONDUTA/TRATAMENTO
[Medica√ß√µes, orienta√ß√µes ou tratamentos prescritos]

### üìù OBSERVA√á√ïES IMPORTANTES
[Pontos relevantes adicionais]

### üîÑ RETORNO
[Orienta√ß√µes sobre retorno se mencionadas]

Mantenha o resumo conciso, profissional e focado nos aspectos m√©dicos mais importantes.
"""
        
        try:
            response = model.generate_content(prompt)
            summary = response.text
            
            # Salvar resumo
            base_filename = os.path.splitext(filename)[0]
            summary_filename = f'{base_filename}_resumo.txt'
            summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
            
            with open(summary_path, 'w', encoding='utf-8') as f:
                f.write(summary)
            
            # Salvar c√≥pia completa automaticamente
            try:
                combined_filename = f'{base_filename}_conversa_completa.txt'
                combined_path = os.path.join(TRANSCRIPTIONS_DIR, combined_filename)
                
                combined_content = f"""# CONVERSA COMPLETA - {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

## üìÑ TRANSCRI√á√ÉO ORIGINAL

{transcription_content}

{'='*80}

## üìã RESUMO GERADO PELA IA

{summary}

{'='*80}

Arquivo gerado automaticamente pelo sistema AudioToText
Cont√©m a transcri√ß√£o original e o resumo gerado pela IA para refer√™ncia futura.
"""
                
                with open(combined_path, 'w', encoding='utf-8') as f:
                    f.write(combined_content)
                    
            except Exception as copy_error:
                print(f"Erro ao salvar c√≥pia autom√°tica: {copy_error}")
            
            return jsonify({
                'success': True,
                'message': 'Resumo gerado com sucesso!' + (' (personalizado)' if custom_prompt else ''),
                'summary': summary,
                'summary_filename': summary_filename
            })
            
        except Exception as ai_error:
            return jsonify({
                'success': False,
                'message': f'Erro ao gerar resumo com IA: {str(ai_error)}'
            }), 500
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao processar solicita√ß√£o: {str(e)}'
        }), 500

@app.route('/api/view_summary/<filename>')
@login_required
def view_summary(filename):
    """Visualizar resumo existente"""
    try:
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            return jsonify({
                'success': True,
                'content': content
            })
        else:
            return jsonify({'success': False, 'message': 'Resumo n√£o encontrado'}), 404
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao carregar resumo: {str(e)}'
        }), 500

# Novas rotas para exporta√ß√£o
@app.route('/export_summary_pdf/<filename>')
@login_required
def export_summary_pdf(filename):
    """Exportar resumo como PDF"""
    try:
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({'success': False, 'message': 'Resumo n√£o encontrado'}), 404
        
        # Ler conte√∫do do resumo
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extrair nome do paciente para o t√≠tulo
        base_name = filename.replace('_resumo.txt', '')
        parts = base_name.split('_')
        patient_name = 'Conversa' if len(parts) < 3 or parts[1] == 'conversa' else parts[1]
        title = f"Resumo da Consulta - {patient_name}"
        
        # Criar PDF
        pdf_buffer = create_pdf_from_text(content, title)
        
        # Nome do arquivo PDF
        pdf_filename = f"{base_name}_resumo.pdf"
        
        return send_file(
            pdf_buffer,
            as_attachment=True,
            download_name=pdf_filename,
            mimetype='application/pdf'
        )
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao exportar PDF: {str(e)}'
        }), 500

@app.route('/export_summary_docx/<filename>')
@login_required
def export_summary_docx(filename):
    """Exportar resumo como DOCX"""
    try:
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if not os.path.exists(filepath):
            return jsonify({'success': False, 'message': 'Resumo n√£o encontrado'}), 404
        
        # Ler conte√∫do do resumo
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extrair nome do paciente para o t√≠tulo
        base_name = filename.replace('_resumo.txt', '')
        parts = base_name.split('_')
        patient_name = 'Conversa' if len(parts) < 3 or parts[1] == 'conversa' else parts[1]
        title = f"Resumo da Consulta - {patient_name}"
        
        # Criar DOCX
        docx_buffer = create_docx_from_text(content, title)
        
        # Nome do arquivo DOCX
        docx_filename = f"{base_name}_resumo.docx"
        
        return send_file(
            docx_buffer,
            as_attachment=True,
            download_name=docx_filename,
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao exportar DOCX: {str(e)}'
        }), 500

@app.route('/recordings')
@login_required
def get_recordings():
    try:
        user_id = session['user_id']
        recordings = []
        sessions = {}
        
        # Listar arquivos de grava√ß√£o
        for filename in os.listdir(RECORDINGS_DIR):
            if filename.startswith(user_id) and filename.endswith('.wav'):
                filepath = os.path.join(RECORDINGS_DIR, filename)
                file_size = os.path.getsize(filepath)
                
                # Verificar se existe transcri√ß√£o
                transcription_file = os.path.splitext(filename)[0] + '_transcricao.txt'
                transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_file)
                has_transcription = os.path.exists(transcription_path)
                
                if '_sessao_' in filename:
                    # √â um segmento de sess√£o
                    parts = filename.split('_')
                    session_id = parts[2]  # sessao_ID
                    
                    if session_id not in sessions:
                        sessions[session_id] = {
                            'id': session_id,
                            'segments': [],
                            'total_size': 0
                        }
                    
                    sessions[session_id]['segments'].append({
                        'filename': filename,
                        'size': file_size,
                        'has_transcription': has_transcription
                    })
                    sessions[session_id]['total_size'] += file_size
                else:
                    # Grava√ß√£o simples
                    recordings.append({
                        'filename': filename,
                        'size': file_size,
                        'has_transcription': has_transcription,
                        'type': 'simple'
                    })
        
        # Converter sess√µes para lista
        session_list = list(sessions.values())
        
        return jsonify({
            'success': True,
            'recordings': recordings,
            'sessions': session_list
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao listar grava√ß√µes: {str(e)}'
        }), 500

@app.route('/delete_recording', methods=['POST'])
@login_required
def delete_recording():
    try:
        data = request.json
        filename = data['filename']
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(RECORDINGS_DIR, filename)
        
        if os.path.exists(filepath):
            os.remove(filepath)
            
            # Remover transcri√ß√£o se existir
            transcription_file = os.path.splitext(filename)[0] + '_transcricao.txt'
            transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_file)
            
            if os.path.exists(transcription_path):
                os.remove(transcription_path)
            
            # Remover resumo se existir
            summary_file = os.path.splitext(filename)[0] + '_resumo.txt'
            summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_file)
            
            if os.path.exists(summary_path):
                os.remove(summary_path)
            
            return jsonify({
                'success': True,
                'message': 'Arquivo deletado com sucesso!'
            })
        else:
            return jsonify({'success': False, 'message': 'Arquivo n√£o encontrado'}), 404
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao deletar: {str(e)}'
        }), 500

@app.route('/download/<filename>')
@login_required
def download_file(filename):
    user_id = session['user_id']
    
    # Verificar se o arquivo pertence ao usu√°rio
    if not filename.startswith(user_id):
        flash('Acesso negado!', 'error')
        return redirect(url_for('index'))
    
    filepath = os.path.join(RECORDINGS_DIR, filename)
    
    if os.path.exists(filepath):
        return send_file(filepath, as_attachment=True)
    else:
        flash('Arquivo n√£o encontrado!', 'error')
        return redirect(url_for('index'))

@app.route('/finalize_session', methods=['POST'])
@login_required
def finalize_session():
    try:
        data = request.get_json()
        patient_name = data.get('patient_name', '').strip()
        
        # Obter a sess√£o atual do usu√°rio
        session_id = session.get('current_session_id')
        
        if not session_id:
            return jsonify({'success': False, 'message': 'Nenhuma sess√£o ativa encontrada'})
        
        # Atualizar metadados da sess√£o com nome do paciente
        sessions_dir = os.path.join('recordings', session['user_id'], 'sessions')
        session_dir = os.path.join(sessions_dir, session_id)
        metadata_file = os.path.join(session_dir, 'metadata.json')
        
        if os.path.exists(metadata_file):
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            metadata['patient_name'] = patient_name
            metadata['finalized_at'] = datetime.now().isoformat()
            
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        # Limpar sess√£o atual
        session.pop('current_session_id', None)
        
        message = f'Sess√£o finalizada com sucesso'
        if patient_name:
            message += f' para o paciente: {patient_name}'
        
        return jsonify({'success': True, 'message': message})
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'Erro ao finalizar sess√£o: {str(e)}'})

@app.route('/api/save_summary_copy', methods=['POST'])
@login_required
def save_summary_copy():
    """Salvar uma c√≥pia do resumo junto com a conversa original"""
    try:
        data = request.json
        summary_filename = data['summary_filename']
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not summary_filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        summary_path = os.path.join(TRANSCRIPTIONS_DIR, summary_filename)
        
        if not os.path.exists(summary_path):
            return jsonify({'success': False, 'message': 'Resumo n√£o encontrado'}), 404
        
        # Ler conte√∫do do resumo
        with open(summary_path, 'r', encoding='utf-8') as f:
            summary_content = f.read()
        
        # Encontrar a transcri√ß√£o original
        base_name = summary_filename.replace('_resumo.txt', '')
        transcription_filename = base_name + '_transcricao.txt'
        transcription_path = os.path.join(TRANSCRIPTIONS_DIR, transcription_filename)
        
        if not os.path.exists(transcription_path):
            return jsonify({'success': False, 'message': 'Transcri√ß√£o original n√£o encontrada'}), 404
        
        # Ler conte√∫do da transcri√ß√£o
        with open(transcription_path, 'r', encoding='utf-8') as f:
            transcription_content = f.read()
        
        # Criar arquivo combinado
        combined_filename = base_name + '_conversa_completa.txt'
        combined_path = os.path.join(TRANSCRIPTIONS_DIR, combined_filename)
        
        combined_content = f"""# CONVERSA COMPLETA - {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

## üìÑ TRANSCRI√á√ÉO ORIGINAL

{transcription_content}

{'='*80}

## üìã RESUMO GERADO PELA IA

{summary_content}

{'='*80}

Arquivo gerado automaticamente pelo sistema AudioToText
Cont√©m a transcri√ß√£o original e o resumo gerado pela IA para refer√™ncia futura.
"""
        
        # Salvar arquivo combinado
        with open(combined_path, 'w', encoding='utf-8') as f:
            f.write(combined_content)
        
        return jsonify({
            'success': True,
            'message': 'C√≥pia da conversa completa salva com sucesso!',
            'filename': combined_filename
        })
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao salvar c√≥pia: {str(e)}'
        }), 500

@app.route('/view_transcription/<filename>')
@login_required
def view_transcription(filename):
    try:
        user_id = session['user_id']
        
        # Verificar se o arquivo pertence ao usu√°rio
        if not filename.startswith(user_id):
            return jsonify({'success': False, 'message': 'Acesso negado'}), 403
        
        filepath = os.path.join(TRANSCRIPTIONS_DIR, filename)
        
        if os.path.exists(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            return jsonify({
                'success': True,
                'content': content
            })
        else:
            return jsonify({'success': False, 'message': 'Arquivo de transcri√ß√£o n√£o encontrado'}), 404
    
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Erro ao carregar transcri√ß√£o: {str(e)}'
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)